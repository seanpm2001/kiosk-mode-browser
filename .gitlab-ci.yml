image: docker:latest

variables:
  DEBIAN_RELEASE: "bullseye"
  # container version
  CHROMIUM_MAJOR: "2"
  CHROMIUM_MINOR: "5"
  CHROMIUM_PATCH: "0"

  CHROMIUM_X11_MAJOR: "2"
  CHROMIUM_X11_MINOR: "5"
  CHROMIUM_X11_PATCH: "0"

  COG_MAJOR: "2"
  COG_MINOR: "5"
  COG_PATCH: "0"

  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  GITLAB_DOCKERREGISTRY_SUFFIX: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GITLAB_DOCKERREGISTRY_SUFFIX_LATEST: ${CI_COMMIT_REF_SLUG}-latest

services:
  - name: docker:dind

before_script:
  - docker info

stages:
  - build
  - build-multiarch
  - deploy
  - deploy-multiarch

# Docker image builds
#
# Build the Docker images  specificd in DOCKERFILE_FOLDER/IMAGE_NAME and push
# it to Gitlab's internal Docker registry
.docker-build:
  variables:
    IMAGE_ARCH: linux/arm
    BUILD_TYPE: wayland
    DOCKERFILE_NAME: Dockerfile.Chromium
  script:
    # Try to download latest image for cache, but don't fail if it does not exist
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} || true
    - export DATE=$(date +%Y%m%d)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login -u $CI_DOCKER_HUB_PULL_USER -p $CI_DOCKER_HUB_PULL_PASSWORD
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker build --build-arg BUILD_TYPE=${BUILD_TYPE}
                     --build-arg BASE_IMAGE=${BASE_IMAGE}
                     --build-arg IMAGE_TAG=${IMAGE_TAG}
                     --build-arg IMAGE_ARCH=${IMAGE_ARCH}
                     --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
                     ${DOCKER_NO_CACHE:+--no-cache}
                     --label container.name=${IMAGE_NAME}
                     --label container.version=${MAJOR}.${MINOR}.${PATCH}-${DATE}
                     --label git.branch=${CI_COMMIT_BRANCH}
                     --label git.hash=${CI_COMMIT_SHA}
                     --label pipeline.id=${CI_PIPELINE_ID}
                     -f ${DOCKERFILE_NAME}
                     -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
                     -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
                        ${DOCKERFILE_FOLDER}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}

docker-build-chromium:
  extends: .docker-build
  before_script:
    - export MAJOR="${CHROMIUM_MAJOR}"
    - export MINOR="${CHROMIUM_MINOR}"
    - export PATCH="${CHROMIUM_PATCH}"
  variables:
    IMAGE_TAG: ${CHROMIUM_MAJOR}
    BASE_IMAGE: wayland-base
    IMAGE_NAME: arm32v7-chromium
    DOCKERFILE_FOLDER: "./"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build

docker-build-chromium-x11:
  extends: .docker-build
  before_script:
    - export MAJOR="${CHROMIUM_X11_MAJOR}"
    - export MINOR="${CHROMIUM_X11_MINOR}"
    - export PATCH="${CHROMIUM_X11_PATCH}"
  variables:
    IMAGE_TAG: ${CHROMIUM_X11_MAJOR}-${DEBIAN_RELEASE}
    BASE_IMAGE: debian
    IMAGE_NAME: chromium-x11
    BUILD_TYPE: x11
    DOCKERFILE_FOLDER: "./"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build

docker-build-chromium-arm64:
  extends: .docker-build
  before_script:
    - export MAJOR="${CHROMIUM_MAJOR}"
    - export MINOR="${CHROMIUM_MINOR}"
    - export PATCH="${CHROMIUM_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm64
    IMAGE_TAG: ${CHROMIUM_MAJOR}
    BASE_IMAGE: wayland-base
    IMAGE_NAME: arm64v8-chromium
    DOCKERFILE_FOLDER: "./"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build

docker-build-cog:
  extends: .docker-build
  before_script:
    - export MAJOR="${COG_MAJOR}"
    - export MINOR="${COG_MINOR}"
    - export PATCH="${COG_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm
    IMAGE_TAG: ${COG_MAJOR}
    BASE_IMAGE: wayland-base
    IMAGE_NAME: arm32v7-cog
    DOCKERFILE_FOLDER: "./"
    DOCKERFILE_NAME: "Dockerfile.Cog"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build

docker-build-cog-arm64:
  extends: .docker-build
  before_script:
    - export MAJOR="${COG_MAJOR}"
    - export MINOR="${COG_MINOR}"
    - export PATCH="${COG_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm64
    IMAGE_TAG: ${COG_MAJOR}
    BASE_IMAGE: wayland-base-vivante
    IMAGE_NAME: arm64v8-cog
    DOCKERFILE_FOLDER: "./"
    DOCKERFILE_NAME: "Dockerfile.Cog"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build

# Enable experimental features in Docker client (experimental feature are needed for manifest)
.do_docker_experimental: &do_docker_experimental
    - mkdir -p $HOME/.docker
    - "echo -e '{\n  \"experimental\": \"enabled\"\n}' | tee $HOME/.docker/config.json"
    - docker version

.docker-build-multiarch:
  before_script:
    - *do_docker_experimental
    - rm -rf ~/.docker/manifests/*
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  - docker manifest create ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  - docker manifest annotate ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${GITLAB_DOCKERREGISTRY_SUFFIX}  --os linux --arch arm
  - docker manifest annotate ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${GITLAB_DOCKERREGISTRY_SUFFIX}  --os linux --arch arm64
  - docker manifest inspect -v ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
  - docker manifest push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}

docker-build-chromium-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_NAME: chromium
    IMAGE_NAME_32: arm32v7-chromium
    IMAGE_NAME_64: arm64v8-chromium
  stage: build-multiarch

docker-build-cog-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_NAME: cog
    IMAGE_NAME_32: arm32v7-cog
    IMAGE_NAME_64: arm64v8-cog
  stage: build-multiarch

# Docker deploy jobs
#
# Make sure DOCKER_HUB_USER/DOCKER_HUB_TOKEN is properly set in the project
# specific Gitlab CI settings.
.docker-deploy:
  when: manual
  allow_failure: false
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  when: manual
  script:
    - *do_docker_experimental
    - export DATE=$(date +%Y%m%d)
    - export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH} ${MAJOR}.${MINOR}.${PATCH}-${DATE}"
    - export DOCKER_TAGS="${MAJOR} ${MAJOR}.${MINOR}"
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN;
    - for tag in ${DOCKER_TAGS_CHECK};
        do
          docker manifest inspect ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag} > /dev/null && true; RESULT=$?;
          (if [ $RESULT == 0 ] ; then echo "Image with ${tag} tag already exists." && exit 1 ; fi);
        done
    - for tag in ${DOCKER_TAGS} ${DOCKER_TAGS_CHECK};
        do
          docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag};
          docker push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag};
        done

docker-deploy-chromium:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${CHROMIUM_MAJOR}"
    - export MINOR="${CHROMIUM_MINOR}"
    - export PATCH="${CHROMIUM_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-chromium
  stage: deploy

docker-deploy-chromium-x11:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${CHROMIUM_X11_MAJOR}"
    - export MINOR="${CHROMIUM_X11_MINOR}"
    - export PATCH="${CHROMIUM_X11_PATCH}"
  variables:
    IMAGE_NAME: chromium-x11
  stage: deploy

docker-deploy-chromium-arm64:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${CHROMIUM_MAJOR}"
    - export MINOR="${CHROMIUM_MINOR}"
    - export PATCH="${CHROMIUM_PATCH}"
  variables:
    IMAGE_NAME: arm64v8-chromium
  stage: deploy

docker-deploy-cog:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${COG_MAJOR}"
    - export MINOR="${COG_MINOR}"
    - export PATCH="${COG_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-cog
  stage: deploy

docker-deploy-cog-arm64:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${COG_MAJOR}"
    - export MINOR="${COG_MINOR}"
    - export PATCH="${COG_PATCH}"
  variables:
    IMAGE_NAME: arm64v8-cog
  stage: deploy

.docker-deploy-multiarch:
  script:
  - *do_docker_experimental
  - export DATE=$(date +%Y%m%d)
  - export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH} ${MAJOR}.${MINOR}.${PATCH}-${DATE}"
  - export DOCKER_TAGS="${MAJOR} ${MAJOR}.${MINOR}"
  - rm -rf ~/.docker/manifests/*
  - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN
  - for tag in ${DOCKER_TAGS_CHECK};
      do
        docker manifest inspect ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag} > /dev/null && true; RESULT=$?;
        (if [ $RESULT == 0 ] ; then echo "Image with ${tag} tag already exists." && exit 1 ; fi);
      done
  - for tag in ${DOCKER_TAGS} ${DOCKER_TAGS_CHECK};
      do
        docker manifest create ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${tag} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${tag};
        docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${tag} --os linux --arch arm;
        docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${tag} --os linux --arch arm64;
        docker manifest inspect -v ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag};
        docker manifest push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag};
      done

docker-deploy-chromium-multiarch:
  extends: .docker-deploy-multiarch
  needs: ["docker-deploy-chromium", "docker-deploy-chromium-arm64"]
  before_script:
    - export MAJOR="${CHROMIUM_MAJOR}"
    - export MINOR="${CHROMIUM_MINOR}"
    - export PATCH="${CHROMIUM_PATCH}"
  variables:
    IMAGE_NAME: chromium
    IMAGE_NAME_32: arm32v7-chromium
    IMAGE_NAME_64: arm64v8-chromium
  stage: deploy-multiarch

docker-deploy-cog-multiarch:
  extends: .docker-deploy-multiarch
  needs: ["docker-deploy-cog", "docker-deploy-cog-arm64"]
  before_script:
    - export MAJOR="${COG_MAJOR}"
    - export MINOR="${COG_MINOR}"
    - export PATCH="${COG_PATCH}"
  variables:
    IMAGE_NAME: cog
    IMAGE_NAME_32: arm32v7-cog
    IMAGE_NAME_64: arm64v8-cog
  stage: deploy-multiarch